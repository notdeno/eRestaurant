@model SEDC.PracticalAspNet.Common.Contracts.DtoMenu

@{
    ViewBag.Title = "Details";
}

<h2>@Model.MenuName</h2>
<hr class="add-item" />
<h2>
    categories:
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#createCategoryModal">
        Add
    </button>
</h2>

<div id="app">

</div>

<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>

<!--create category modal goes here-->
<div id="createCategoryModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <!--modal  header goes here-->
                <h5 class="modal-title">Add Category</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!--modal  body goes here-->
                <form id="form_createCategory" action="/asdasdasd" method="post">
                    <input type="hidden" name="menuId" value="@Model.Id" />
                    <div class="form-group">
                        <label for="categoryName">Category Name</label>
                        <input type="text" name="categoryName" class="form-control" placeholder="Category Name" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="btn_createCategory" type="button" class="btn btn-primary" data-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!--create item modal goes here-->
<div id="createItemModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <!--modal  header goes here-->
                <h5 class="modal-title">Add Item</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!--modal  body goes here-->
                <form id="form_createItem" method="post">
                    <input type="hidden" name="CategoryId" value="" id="selected-category-id" />
                    <div class="form-group">
                        <label for="ci-input-name">Name</label>
                        <input id="ci-input-name" type="text" name="Name" class="form-control" placeholder="Name of the Item" />
                    </div>
                    <div class="form-group">
                        <label for="ci-input-description">Description</label>
                        <input id="ci-input-description" type="text" name="Description" class="form-control" placeholder="Description" />
                    </div>
                    <div class="form-group">
                        <label for="ci-input-contents">Contents</label>
                        <input id="ci-input-contents" type="text" name="Contents" class="form-control" placeholder="Contents" />
                    </div>
                    <div class="form-group">
                        <label for="ci-input-price">Price</label>
                        <input id="ci-input-price" type="number" name="Price" class="form-control" placeholder="Ex. 10.00" />
                    </div>
                    <div class="form-group">
                        <label for="ci-input-availability">Availability</label>
                        <input id="ci-input-availability" checked type="checkbox" name="Availability" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="btn_createItem" type="button" class="btn btn-primary" data-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>

@section scripts{

    <script>
        // A $( document ).ready() block.
        $(document).ready(function () {

            var Person  = function(firstName, lastName) {

            }
            var person = new Person("xhevo","ibraimi");

            var App = function () {
                var _this = this;
                var createCategoryUrl = '/categories/create';
                var getCategoriesUrl = '/categories/getbymenu';
                var getItemsUrl = '/items/getbycategory';
                var createItemUrl = '/items/create';
                var btn_createCategory = $("#btn_createCategory");
                var btn_createItem = $("#btn_createItem");
                var form_createCategory = $("#form_createCategory")[0];
                var form_createItem = $("#form_createItem")[0];
                var selectedCategoryInput = $("#selected-category-id")[0];

                this.divId = "app";
                this.appDiv = null;
                var _state = { };

                btn_createCategory.on('click', function (event) {
                    _this.createCategory();
                });
                btn_createItem.on('click', function (event) {
                    _this.createItem();
                });


                this.renderAccordionBeginning = function () {
                    return `<div class="panel-group" id="accordion">
                <div class="panel panel-default">`;
                }

                this.renderCategory = function (category, index) {
                    var result = `<div class="panel-heading${index === _state.activeCategory ? " active" : ""}">
                        <h4 class="panel-title">
                            <a data-toggle="collapse" data-parent="#accordion" href="#collapse${category.id}" data-category-id="${category.id}" class="category-header" data-category-index="${index}">
                                ${category.categoryName}
                            </a>
                        </h4>
                    </div>
                    <div id="collapse${category.id}" class="panel-collapse collapse ${index === _state.activeCategory? " in" : ""}">
                        <div class="panel-body">
                            ${_this.renderItemsTable(category)}
                        </div>
                    </div>`;
                    return result;
                };

                this.renderAccordionCategories = function () {
                    var result = "";
                    if (_state && _state.categories && _state.categories.length) {
                        $.each(_state.categories, function (index, category) {
                            result += _this.renderCategory(category, index);
                        });
                    }
                    return result;
                };

                this.renderAccordionEnding = function () {
                    return `</div></div>`;
                }

                this.init = function () {

                    _this.appDiv = $("#" + _this.divId);
                    if (!_this.appDiv.length) {
                        throw new Error(`div with the given id "${_this.divId}" was not found`);
                    }
                    $("body").on("click", ".add-item", function (e) {
                        selectedCategoryInput.value = e.target.getAttribute("data-category-id");
                    });
                    $("body").on("click", ".category-header", function (e) {
                        console.log(e.target);
                        var categoryId = e.target.getAttribute("data-category-id");
                        _state.activeCategory = parseInt(e.target.getAttribute("data-category-index"));
                        var categories = _state.categories.filter(x => x.id == categoryId);
                        if (categories.length) {
                            var category = categories[0];
                            console.log(category);
                            if (category && category.id && !category.isLoaded) {
                                console.log("loading items")
                                _this.loadItems(category);
                            }
                        }
                    });
                    _state.categories = [];
                    _state.activeCategory = 0;
                    _this.render();
                    _this.fetchCategories();
                };

                this.render = function () {
                    var result = "";
                    result += _this.renderAccordionBeginning();
                    result += _this.renderAccordionCategories();
                    result += _this.renderAccordionEnding();
                    _this.appDiv.html("");
                    _this.appDiv.append(result);
                };

                this.fetchCategories = function () {
                    $.get(getCategoriesUrl + "?menuId=" + @Model.Id, function (data) {
                        _state.categories = data.map(function (x) {
                            return {
                                id: x.Id,
                                categoryName: x.CategoryName
                            };
                        });
                        _this.render();
                        if (_state.categories && _state.categories.length) {
                            _this.loadItems(_state.categories[0]);
                        }
                    });
                };

                this.loadItems = function (category) {
                    if (category && category.id) {
                        $.get(getItemsUrl + "?categoryId=" + category.id, function (items) {
                            console.log(items);
                            
                            _state.categories.filter(function (c) {
                                if (c && c.id === category.id) {
                                    c.items = items;
                                    c.isLoaded = true;
                                    _this.render();
                                }
                            });
                        });
                    }
                }

                this.renderItemsTable = function (category) {
                    var result = `<table class="table table-responsive table-striped table-bordered">
                        <thead>
                            <tr>
                                <td>Name</td>
                                <td>Description</td>
                                <td>Contents</td>
                                <td>Price</td>
                                <td>Availability</td>
                                <td>
                                    <button data-category-id="${category.id}" class="btn btn-success add-item" data-toggle="modal" data-target="#createItemModal">+</button>
                                </td>
                            </tr>
                        </thead>
                        <tbody>
                            ${_this.renderItems(category)}
                        </tbody>
                </table >`;
                    return result;
                }

                this.renderItems = function (category) {
                    var result = "";
                    console.log(category);
                    if (category && category.items && category.items.length) {
                        $.each(category.items, function (index, item) {
                            console.log(category.items);
                            result += `<tr>
                                <td>${item.Name}</td>
                                <td>${item.Description}</td>
                                <td>${item.Contents}</td>
                                <td>${item.Price}</td>
                                <td>${item.Availability}</td>
                                <td>
                                    <button data-item-id="${item.Id}" class="btn btn-danger">delete</button> |
                                    <button data-item-id="${item.Id}" class="btn btn-warning">edit</button>
                                </td>
                            </tr>`
                        });
                    }
                    return result;
                }

                this.createCategory = function () {
                    var request = {
                        menuId: form_createCategory["menuId"].value,
                        categoryName: form_createCategory["categoryName"].value
                    };
                    $.post(createCategoryUrl, request, function (data) {
                        _state.categories.push({
                            id: data.Id,
                            categoryName: data.CategoryName
                        });
                        _this.render();
                    });
                };

                this.createItem = function () {
                    var request = {
                        categoryId: form_createItem["CategoryId"].value,
                        name: form_createItem["Name"].value,
                        description: form_createItem["Description"].value,
                        contents: form_createItem["Contents"].value,
                        price: form_createItem["Price"].value,
                        availability : form_createItem["Availability"].checked,
                    };
                    $.post(createItemUrl, request, function (item) {
                        if (_state && _state.categories && _state.categories.length) {
                            for (var i = 0; i < _state.categories.length; i++) {
                                var c = _state.categories[i];
                                if (c.items && c.id == item.CategoryId) {
                                    c.items.push(item);
                                    _this.render();
                                }
                            }
                        }
                    });
                };
            }
            
            var app = new App();
            app.divId = "app";
            app.init();
        });
    </script>
}
